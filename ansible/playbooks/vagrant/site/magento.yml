---
- name: Create Magento 2 Site
  hosts: development-vm

  vars_files:
    - "{{ 'ansible/vars/local_paths.yml' | realpath }}"

  vars:
    dynamic_php: yes
    public_directory: pub
    php_max_execution_time: 300
    php_exec: /usr/local/phpenv/shims/php
    php_open_basedir:
      - /usr/lib/ssl
      - /etc/ssl/certs
    nginx_configs:
      - magento-{{ domain }}.conf
    content_security_policy:
      "default-src":
        - self
      "script-src":
        - self
        - unsafe-inline
        - unsafe-eval
        - www.google.com
        - www.gstatic.com
      "style-src":
        - self
        - unsafe-inline
        - "data:"
      "img-src":
        - self
        - static.magento.com
      "base-uri": []
      "form-action":
        - self
      "frame-ancestors": []
      "upgrade-insecure-requests": yes

  environment:
    PHPENV_ROOT: "{{ phpenv_root }}"
    PHPENV_VERSION: "{{ php_version }}"
    PATH: "{{ phpenv_root }}/shims:{{ ansible_env.PATH }}"

  pre_tasks:
    - import_tasks: "{{ tasks_dir }}/import_vars.yml"
      tags: silent
    - import_tasks: "{{ tasks_dir }}/prompt/domain.yml"
      tags: silent
    - import_tasks: "{{ tasks_dir }}/prompt/database/database.yml"
      tags: silent
    - import_tasks: "{{ tasks_dir }}/prompt/database/user.yml"
      tags: silent
    - import_tasks: "{{ tasks_dir }}/prompt/email.yml"
      tags: silent
    - import_tasks: "{{ tasks_dir }}/prompt/magento.yml"
      tags: silent

  roles:
  - role: bbatsche.PHP
  - role: bbatsche.MySQL
  - role: geerlingguy.java
    become: yes

  tasks:
    - name: Copy Magento Nginx Config
      template:
        src: "{{ansible_dir }}/templates/magento.conf.j2"
        dest: /etc/nginx/conf.d/magento-{{ domain }}.conf
      become: yes
      notify: Restart Nginx

    - name: Install Elasticsearch
      import_role:
        name: geerlingguy.elasticsearch
      vars:
        elasticsearch_version: 5.x
      become: yes

    - name: Install RabbitMQ
      apt: name=rabbitmq-server state=present
      become: yes

    - include_tasks: "{{ tasks_dir }}/post_php_site.yml"
    - include_tasks: "{{ tasks_dir }}/install_blackfire.yml"

    - name: Check for composer.json
      stat: path={{ http_root }}/{{ domain }}/composer.json
      register: composer_json

    - name: Install Magento Dependencies
      command: composer install --prefer-dist
      args:
        chdir: "{{ http_root }}/{{ domain }}"
      register: composer_output
      changed_when: "'Nothing to install or update' not in composer_output.stderr"
      when: composer_json.stat.exists

    - name: Check for bin/magento
      stat: path={{ http_root }}/{{ domain }}/bin/magento
      register: bin_magento

    - name: Setup & Install Magento
      block:
        - name: Check for env.php
          stat: path={{ http_root }}/{{ domain }}/app/etc/env.php
          register: env_php

        - name: Check if Magento is Installed
          replace:
            path: "{{ http_root }}/{{ domain }}/app/etc/env.php"
            regexp: "['\"]install['\"]\\s*=>.+\\n\\s*['\"]date['\"]"
          check_mode: yes
          changed_when: no
          register: magento_installed
          when: env_php.stat.exists

        - name: Remove Cron Jobs
          command: "{{ http_root }}/{{ domain }}/bin/magento cron:remove --no-interaction"
          args:
            chdir: "{{ http_root }}/{{ domain }}"
          when: env_php.stat.exists and magento_installed.msg != ""

        - name: Enable All Modules
          command: "{{ http_root }}/{{ domain }}/bin/magento module:enable --all"
          args:
            chdir: "{{ http_root }}/{{ domain }}"
          register: modules_enable
          changed_when: "'No modules were changed.' not in modules_enable.stdout"

        - name: Compile DI
          command: "{{ http_root }}/{{ domain }}/bin/magento setup:di:compile"
          args:
            chdir: "{{ http_root }}/{{ domain }}"
            creates: "{{ http_root }}/{{ domain }}/generated/code"

        - name: Install Magento
          command: >
            {{ http_root }}/{{ domain }}/bin/magento setup:install --no-interaction --cleanup-database
            --db-host=localhost --db-name={{ new_db_name }} --db-user={{ new_db_user }} --db-password={{ new_db_pass }}
            --admin-user={{ magento_admin_user }} --admin-password={{ magento_admin_password }}
            --admin-email={{ email_address }} --admin-firstname={{ magento_admin_firstname }}
            --admin-lastname={{ magento_admin_lastname }} --session-save=redis --cache-backend=redis --page-cache=redis
          args:
            chdir: "{{ http_root }}/{{ domain }}"
          when: not env_php.stat.exists or magento_installed.msg == ""
          notify: Install Magento Cron

        - name: Upgrade Magento
          command: "{{ http_root }}/{{ domain }}/bin/magento setup:upgrade --no-interaction"
          args:
            chdir: "{{ http_root }}/{{ domain }}"
          when: env_php.stat.exists and magento_installed.msg != ""
          notify:
            - Flush Magento Cache
            - Install Magento Cron

        - name: Check Admin URL
          replace:
            path: "{{ http_root }}/{{ domain }}/app/etc/env.php"
            regexp: "['\"]backend['\"]\\s*=>.*\\n\\s*['\"]frontName['\"]\\s*=>\\s*['\"]admin['\"]"
          check_mode: yes
          changed_when: no
          register: admin_url

        - name: Set Admin URL
          command: >
            {{ http_root }}/{{ domain }}/bin/magento setup:config:set --no-interaction --backend-frontname=admin
          args:
            chdir: "{{ http_root }}/{{ domain }}"
          when: admin_url.msg == ""

        - name: Set Magento Configs
          include_tasks: "{{ tasks_dir }}/set_magento_config.yml"
          loop:
            - regexp: "['\"]timezone['\"]\\s*=>\\s*['\"]{{ ntp_timezone }}['\"]"
              path: general/locale/timezone
              value: "{{ ntp_timezone }}"
            - regexp: "['\"]base_url['\"]\\s*=>\\s*['\"]http://{{ domain }}/['\"]"
              path: web/unsecure/base_url
              value: http://{{ domain }}/
            - regexp: "['\"]base_url['\"]\\s*=>\\s*['\"]https://{{ domain }}/['\"]"
              path: web/secure/base_url
              value: https://{{ domain }}/
            - regexp: "['\"]use_in_adminhtml['\"]\\s*=>\\s*['\"]?1['\"]?"
              path: web/secure/use_in_adminhtml
              value: 1
            - regexp: "['\"]use_in_frontend['\"]\\s*=>\\s*['\"]?1['\"]?"
              path: web/secure/use_in_frontend
              value: 1
            - regexp: "['\"]engine['\"]\\s*=>\\s*['\"]elasticsearch5['\"]"
              path: catalog/search/engine
              value: elasticsearch5
            - regexp: "['\"]elasticsearch5_server_hostname['\"]\\s*=>\\s*['\"]localhost['\"]"
              path: catalog/search/elasticsearch5_server_hostname
              value: localhost
            - regexp: "['\"]elasticsearch5_server_port['\"]\\s*=>\\s*['\"]?9200['\"]?"
              path: catalog/search/elasticsearch5_server_port
              value: 9200
            - regexp: "['\"]use_rewrites['\"]\\s*=>\\s*['\"]?1['\"]?"
              path: web/seo/use_rewrites
              value: 1
      when: bin_magento.stat.exists

  post_tasks:
    - include_tasks: "{{ tasks_dir }}/post_ssl_dev_site.yml"

  handlers:
    - name: Restart Blackfire Agent
      service:
        name: blackfire-agent
        state: restarted
      become: yes

    - name: Install Magento Cron
      command: "{{ http_root }}/{{ domain }}/bin/magento cron:install --no-interaction"
      args:
        chdir: "{{ http_root }}/{{ domain }}"
      register: cron_install
      failed_when: cron_install.rc != 0 and cron_install.stdout != "Crontab has already been generated and saved"
      changed_when: cron_install.stdout == "Crontab has been generated and saved"

    - name: Flush Magento Cache
      command: "{{ http_root }}/{{ domain }}/bin/magento cache:flush --no-interaction"
      args:
        chdir: "{{ http_root }}/{{ domain }}"
